# ado-pipeline-templates/jobs/dotnet-build-test.yml
parameters:
- name: artifact_name
  type: string
  default: drop

steps:
- task: UseDotNet@2
  displayName: "Use .NET 8"
  inputs:
    packageType: sdk
    version: 8.x

- script: |
    set -e
    cd "$(Build.SourcesDirectory)"
    echo "Repo root: $(pwd)"
    FOUND="$(git ls-files '*.sln' | head -n1)"
    if [ -z "$FOUND" ]; then FOUND="$(git ls-files '*.csproj' | head -n1)"; fi
    if [ -z "$FOUND" ]; then
      echo "##vso[task.logissue type=warning].NET solution/project not found; skipping .NET CI."
      echo "##vso[task.setvariable variable=DotFound]false"
      exit 0
    fi
    DIR="$(dirname "$FOUND")"
    echo "Found: $FOUND"
    echo "##vso[task.setvariable variable=DotFound]true"
    echo "##vso[task.setvariable variable=DotProject]$(Build.SourcesDirectory)/$FOUND"
    echo "##vso[task.setvariable variable=DotProjDir]$(Build.SourcesDirectory)/$DIR"
  displayName: "Locate .NET project/solution"

- script: 'echo "Skipping .NET CI: no .sln/.csproj in repo"'
  displayName: "Skip .NET (no project)"
  condition: ne(variables['DotFound'], 'true')

- task: DotNetCoreCLI@2
  displayName: "Restore"
  condition: eq(variables['DotFound'], 'true')
  inputs:
    command: restore
    projects: '$(DotProject)'
    workingDirectory: '$(DotProjDir)'

- task: DotNetCoreCLI@2
  displayName: "Build"
  condition: eq(variables['DotFound'], 'true')
  inputs:
    command: build
    projects: '$(DotProject)'
    arguments: '--configuration Release --no-restore'
    workingDirectory: '$(DotProjDir)'

- task: DotNetCoreCLI@2
  displayName: "Test"
  condition: eq(variables['DotFound'], 'true')
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration Release --no-build --logger trx --results-directory $(Build.SourcesDirectory)/TestResults'
    publishTestResults: true
    workingDirectory: '$(Build.SourcesDirectory)'

- script: |
    set -e
    mkdir -p "$(Build.SourcesDirectory)/dist"
    if [[ "$(DotProject)" == *.sln ]]; then
      echo "Publishing all projects under $(DotProjDir)"
      find "$(DotProjDir)" -maxdepth 3 -type f -name '*.csproj' -print0 | while IFS= read -r -d '' P; do
        dotnet publish "$P" --configuration Release --no-build -o "$(Build.SourcesDirectory)/dist"
      done
    else
      echo "Publishing $(DotProject)"
      dotnet publish "$(DotProject)" --configuration Release --no-build -o "$(Build.SourcesDirectory)/dist"
    fi
  displayName: "Publish app to dist"
  condition: eq(variables['DotFound'], 'true')

- task: PublishPipelineArtifact@1
  displayName: "Publish artifact (drop)"
  condition: eq(variables['DotFound'], 'true')
  inputs:
    targetPath: '$(Build.SourcesDirectory)/dist'
    artifact: 'drop'
