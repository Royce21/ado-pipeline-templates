# jobs/node-build-test.yml
parameters:
- name: artifact_name
  type: string
  default: drop

steps:
# Locate a Node project (root or first package.json anywhere)
- script: |
    set -e
    cd "$(Build.SourcesDirectory)"
    echo "Repo root: $(pwd)"
    if [ -f package.json ]; then
      DIR="$(pwd)"
    else
      FOUND="$(git ls-files 'package.json' | head -n1)"
      if [ -z "$FOUND" ]; then
        echo "##vso[task.logissue type=warning]No package.json found under $(Build.SourcesDirectory); skipping Node CI."
        echo "##vso[task.setvariable variable=NodeFound]false"
        exit 0
      fi
      DIR="$(dirname "$(Build.SourcesDirectory)/$FOUND")"
    fi
    echo "Using Node project dir: $DIR"
    echo "##vso[task.setvariable variable=NodeFound]true"
    echo "##vso[task.setvariable variable=NodeProjDir]$DIR"
  displayName: Locate Node project

# If nothing found, show a friendly no-op step and end successfully
- script: echo "Skipping Node CI: no package.json in repo"
  displayName: Skip Node (no package.json)
  condition: ne(variables['NodeFound'], 'true')

- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
    checkLatest: true
  displayName: Use Node
  condition: eq(variables['NodeFound'], 'true')

- script: |
    cd "$(NodeProjDir)"
    echo "Working dir: $(pwd)"
    if [ -f package-lock.json ]; then
      npm ci
    else
      echo "No package-lock.json found; running npm install"
      npm install
    fi
  displayName: Install deps
  condition: eq(variables['NodeFound'], 'true')

- script: |
    cd "$(NodeProjDir)"
    npm test --if-present
  displayName: Test
  condition: eq(variables['NodeFound'], 'true')

- script: |
    cd "$(NodeProjDir)"
    npm run build --if-present
  displayName: Build
  condition: eq(variables['NodeFound'], 'true')

- script: |
    set -e
    mkdir -p "$(Build.SourcesDirectory)/dist"
    for d in "dist" "build" "out"; do
      if [ -d "$(NodeProjDir)/$d" ]; then
        echo "Copying $(NodeProjDir)/$d -> dist"
        cp -R "$(NodeProjDir)/$d"/. "$(Build.SourcesDirectory)/dist" || true
      fi
    done
  displayName: Collect build output
  condition: eq(variables['NodeFound'], 'true')

- task: PublishPipelineArtifact@1
  displayName: Publish artifact
  inputs:
    targetPath: '$(Build.SourcesDirectory)/dist'
    artifact: ${{ parameters.artifact_name }}
  condition: eq(variables['NodeFound'], 'true')
