# ado-pipeline-templates/stages/cd.yml
parameters:
- name: env
  type: string           # dev | qa | prod
- name: vmImage
  type: string
  default: ubuntu-latest
- name: artifact_name
  type: string
  default: drop          # must match what CI publishes
- name: service_connection
  type: string
  default: ''            # e.g. my-qa-sp-connection
- name: var_groups
  type: object
  default: []            # e.g. ['app-qa']

stages:
- stage: Deploy_${{ parameters.env }}
  displayName: "Deploy to ${{ parameters.env }}"
  dependsOn: CI
  condition: succeeded()
  variables:
  # Optional variable groups (Library -> Variable groups)
  - ${{ each g in parameters.var_groups }}:
    - group: ${{ g }}

  jobs:
  - deployment: deploy_${{ parameters.env }}
    displayName: "Deploy (${{ parameters.env }})"
    environment: ${{ parameters.env }}       # ADO Environments -> dev/qa/prod (with approvals)
    pool:
      vmImage: ${{ parameters.vmImage }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none

          # âœ… Download the artifact from the CURRENT run
          - download: current
            artifact: ${{ parameters.artifact_name }}
            displayName: "Download artifact (current run)"

          # Inspect what we downloaded (optional but handy while wiring up)
          - script: |
              echo "Artifact folder:"
              ls -la "$(Pipeline.Workspace)/${{ parameters.artifact_name }}"
            displayName: "Inspect artifact"

          # Example deploy placeholder (runs only if a service connection was provided)
          - ${{ if ne(parameters.service_connection, '') }}:
            - task: AzureCLI@2
              displayName: "Deploy (placeholder)"
              inputs:
                azureSubscription: ${{ parameters.service_connection }}
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  echo "Deploying to ${{ parameters.env }} using service connection '${{ parameters.service_connection }}'"
                  echo "Artifact path: $(Pipeline.Workspace)/${{ parameters.artifact_name }}"
                  # TODO: Replace with real az deploy commands (webapp, containerapp, functionapp, etc.)
                  # Example (Web App):
                  # az webapp deploy --resource-group <rg> --name <app> --src-path "$(Pipeline.Workspace)/${{ parameters.artifact_name }}"
